name: Build and Deploy gradle

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Activate .env
      - name: activate .env
        run: echo "${{ secrets.ENV }}" > .env

      # Build Gradle
      - name: Build With Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew build -x test

      # Docker login
      - name: Docker Login to GHCR
        run: echo ${{ secrets.YOUYEON_GITHUB_PAT }} | docker login ghcr.io -u ${{ secrets.YOUYEON_GITHUB_USERNAME }} --password-stdin

      # Image Build
      - name: Build Docker Image
        run: docker build -t ghcr.io/${{ secrets.ORG_NAME }}/ppiyong-api:latest .

      # Docker container push
      - name: Push Docker Image
        run: docker push ghcr.io/${{ secrets.ORG_NAME }}/ppiyong-api:latest

  transfer:
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Transfer docker-compose.yml file to ec2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ./docker-compose.yml
          target: /home/ubuntu/ppiyong-api/

      - name: Transfer nginx directory file to ec2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ./nginx/
          target: /home/ubuntu/

      - name: copy nginx.conf
        run: |
          cd ~
          sudo cp /nginx/nginx.conf /etc/nginx/server/nginx.conf

  deploy:
    runs-on: ubuntu-24.04
    needs: transfer
    steps:
      - name: SSH into EC2 server and Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # 1. cd ~/ppiyong-api
            mkdir -p ~/ppiyong-api
            cd ~/ppiyong-api
            
            # 2. .env 작성
            echo "${{ secrets.ENV }}" > .env
            
            # 3. GHCR 로그인
            echo "${{ secrets.YOUYEON_GITHUB_PAT }}" | docker login ghcr.io -u ${{ secrets.YOUYEON_GITHUB_USERNAME }} --password-stdin
            
            # 4. pull image:latest
            cd ~
            docker pull ghcr.io/${{ secrets.ORG_NAME }}/ppiyong-api:latest
            
            # 5. 환경변수 설정
            export ORG_NAME=${{ secrets.ORG_NAME }}
            
            # 6. restart container
            docker compose up -d --no-deps --force-recreate ppiyong-api
            
            # 7. remove oldest image
            docker image prune -a -f